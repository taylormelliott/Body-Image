{"ast":null,"code":"var _jsxFileName = \"/Users/TaylorElliott/Documents/Devmountain/Projects/BodyFat-App/src/components/Input/Input.jsx\";\nimport React, { Component } from 'react';\nimport LogList from '../LogList/LogList';\nimport './input.css';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Input extends Component {\n  constructor() {\n    super();\n    this.state = {\n      weightInput: 0,\n      bodyFatInput: 0,\n      result: '',\n      logs: [],\n      last\n    };\n    this.handleForm = this.handleForm.bind(this);\n  } //make an axios call to the results table returning everything by user_id\n\n\n  handleWeight(e) {\n    this.setState({\n      weightInput: e\n    });\n  }\n\n  handleBodyFat(e) {\n    this.setState({\n      bodyFatInput: e\n    });\n  }\n\n  handleForm(e) {\n    e.preventDefault();\n    axios.post('/results/add', {\n      user_id: this.props.id,\n      desired_body_fat: this.props.location.state,\n      weight_logs: this.state.weightInput,\n      body_fat_logs: this.state.bodyFatInput,\n      date_logs: Date()\n    }).then(response => {}, error => {\n      console.log(error);\n    });\n    let weight = parseFloat(this.state.weightInput);\n    let currentBodyFat = parseFloat(this.state.bodyFatInput);\n    let goalBodyFat = parseFloat(this.props.location.state);\n\n    function leanBodyMass() {\n      const fatMass = weight * currentBodyFat;\n      const lbm = weight - fatMass;\n      return lbm;\n    }\n\n    const lbm = leanBodyMass();\n\n    function goalBodyWeight() {\n      const goalWeight = Math.floor(lbm / (1 - goalBodyFat));\n      return goalWeight;\n    }\n\n    const goalWeight = goalBodyWeight(); // console.log(goalBodyWeight())\n\n    function totalFatWeightLost() {\n      const fatToLose = weight - goalWeight;\n      return fatToLose;\n    }\n\n    const totalFatLost = totalFatWeightLost(); // console.log(totalFatWeightLost())\n\n    function timeToGoal() {\n      let weeks = 0;\n\n      for (let i = weight; i >= goalWeight; i -= i * 0.01) {\n        weeks++;\n      }\n\n      return weeks;\n    }\n\n    const weeksToGoal = timeToGoal(); // console.log(timeToGoal())\n\n    function tdee() {\n      const kg = weight * .45;\n      const bmr = kg * 20;\n      const thermicFood = bmr * .1;\n      const exerciseCal = 400;\n      const nonExerciseCal = 400;\n      const result = bmr + thermicFood + exerciseCal + nonExerciseCal;\n      return Math.floor(result - 500);\n    }\n\n    const totalCals = tdee();\n\n    function bodyFatCalc() {\n      return `You need to eat ${totalCals} per day to reach your goal of ${Math.floor(goalBodyFat * 100)}%. Aim to lose 1% of your weight per week. It will take ${weeksToGoal} weeks to achieve your goal. You will weight ${goalWeight}lbs and have lost ${totalFatLost} lbs of fat if no muscle mass was lost or gained in the process. It's common to lose or gain some muscle when cutting calories depending on exercise experience. This result should be taken as best case scenario.`;\n    }\n\n    this.setState({\n      result: bodyFatCalc()\n    });\n  } //on submit launch a post request to the results table 'weight_logs','body_fat_logs' searching by user_id. Should automatically store the current date in the 'date_logs' column in the results table upon submit.\n  //if the user is logged in, there should be a get request displaying all the 'weight_logs', body_fat_logs', and 'date_logs' from the results table in the input component \n  //if the user is logged in, there should be a delete request associated with a delete button to the right of each log\n  //if the user is logged in, there should be a put request associated with an edit button to the right of each log that updates all 3 aspects of a log(weight, bodyfat, and date)\n  //build out Logs table. Loglist will be a componenent child of input and render out Log as a child componenet which will display weight, current body fat, and date from the user\n\n\n  render() {\n    console.log(this.props.id);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"container\",\n      className: \"min-height\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: \"Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.handleForm,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Sign in to save and log results. Log your results by entering your current weight and body fat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            placeholder: \"Enter Current Weight\",\n            type: \"number\",\n            onChange: e => {\n              this.handleWeight(e.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }, this), \"Enter as a decimal (Ex. 35% body fat (35/100 = .35)\", /*#__PURE__*/_jsxDEV(\"input\", {\n            placeholder: \"Enter Current Body Fat\",\n            type: \"text\",\n            onChange: e => {\n              this.handleBodyFat(e.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 76\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LogList\n      /* map over the 'logs' state */\n      , {\n        id: this.props.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: this.state.result\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/TaylorElliott/Documents/Devmountain/Projects/BodyFat-App/src/components/Input/Input.jsx"],"names":["React","Component","LogList","axios","Link","Input","constructor","state","weightInput","bodyFatInput","result","logs","last","handleForm","bind","handleWeight","e","setState","handleBodyFat","preventDefault","post","user_id","props","id","desired_body_fat","location","weight_logs","body_fat_logs","date_logs","Date","then","response","error","console","log","weight","parseFloat","currentBodyFat","goalBodyFat","leanBodyMass","fatMass","lbm","goalBodyWeight","goalWeight","Math","floor","totalFatWeightLost","fatToLose","totalFatLost","timeToGoal","weeks","i","weeksToGoal","tdee","kg","bmr","thermicFood","exerciseCal","nonExerciseCal","totalCals","bodyFatCalc","render","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport LogList from '../LogList/LogList'\nimport './input.css'\nimport axios from 'axios'\nimport { Link } from 'react-router-dom'\n\nexport default class Input extends Component {\n    constructor() {\n        super()\n\n        this.state = {\n            weightInput: 0,\n            bodyFatInput: 0,\n            result: '',\n            logs: [],\n            last\n\n            \n        }\n        this.handleForm = this.handleForm.bind(this)\n    }\n\n    //make an axios call to the results table returning everything by user_id\n   \n\n    handleWeight(e) {\n        this.setState({ weightInput: e})\n        \n\n\n    }\n\n    handleBodyFat(e) {\n        this.setState({ bodyFatInput: e})\n    }\n\n    handleForm(e) {\n        e.preventDefault()\n\n        axios.post('/results/add', {\n            user_id: this.props.id,\n            desired_body_fat: this.props.location.state, \n            weight_logs: this.state.weightInput,\n            body_fat_logs: this.state.bodyFatInput,\n            date_logs: Date()\n        })\n        .then((response) => {\n            \n          }, (error) => {\n            console.log(error);\n          });\n\n        \n        let weight = parseFloat(this.state.weightInput)\n        let currentBodyFat = parseFloat(this.state.bodyFatInput)\n        let goalBodyFat = parseFloat(this.props.location.state)\n\n        function leanBodyMass() {\n        const fatMass = weight * currentBodyFat\n        const lbm = weight - fatMass\n        return lbm\n\n        }\n\n        const lbm = leanBodyMass()\n\n        function goalBodyWeight() {\n        const goalWeight = Math.floor(lbm/(1-goalBodyFat))\n        return goalWeight\n\n        }\n\n        const goalWeight = goalBodyWeight()\n\n        // console.log(goalBodyWeight())\n\n        function totalFatWeightLost() {\n        const fatToLose = weight - goalWeight\n        return fatToLose\n        }\n\n        const totalFatLost= totalFatWeightLost()\n        // console.log(totalFatWeightLost())\n\n        function timeToGoal() {\n        \n        let weeks = 0\n\n        for (let i = weight; i >= goalWeight; i-= (i * 0.01)){\n        weeks++\n        \n        }\n        return weeks\n        }\n\n        const weeksToGoal = timeToGoal()\n\n\n        // console.log(timeToGoal())\n\n        function tdee() {\n        const kg = weight * .45\n        const bmr = kg * 20\n        const thermicFood = bmr * .1\n        const exerciseCal = 400\n        const nonExerciseCal = 400\n        const result = bmr + thermicFood + exerciseCal + nonExerciseCal\n        return Math.floor(result - 500)\n        \n        }\n\n        const totalCals = tdee()\n\n        function bodyFatCalc() {\n        return(`You need to eat ${totalCals} per day to reach your goal of ${Math.floor(goalBodyFat * 100)}%. Aim to lose 1% of your weight per week. It will take ${weeksToGoal} weeks to achieve your goal. You will weight ${goalWeight}lbs and have lost ${totalFatLost} lbs of fat if no muscle mass was lost or gained in the process. It's common to lose or gain some muscle when cutting calories depending on exercise experience. This result should be taken as best case scenario.`)\n        \n\n}\n    this.setState({ result: bodyFatCalc()})\n\n    }\n\n    //on submit launch a post request to the results table 'weight_logs','body_fat_logs' searching by user_id. Should automatically store the current date in the 'date_logs' column in the results table upon submit.\n                //if the user is logged in, there should be a get request displaying all the 'weight_logs', body_fat_logs', and 'date_logs' from the results table in the input component \n                //if the user is logged in, there should be a delete request associated with a delete button to the right of each log\n                //if the user is logged in, there should be a put request associated with an edit button to the right of each log that updates all 3 aspects of a log(weight, bodyfat, and date)\n                \n//build out Logs table. Loglist will be a componenent child of input and render out Log as a child componenet which will display weight, current body fat, and date from the user\n    \n    \n\n\n    render() {\n        console.log(this.props.id)\n        return (\n            <div class=\"container\" className=\"min-height\"   >\n                <div className='button'>\n          <Link to='/'>Home</Link>\n        </div>\n                \n                <div  >\n                    \n                    <form onSubmit={this.handleForm}>\n                        <p>Sign in to save and log results. Log your results by entering your current weight and body fat</p>\n                        <input placeholder='Enter Current Weight' type=\"number\" onChange={(e) => {this.handleWeight(e.target.value)}} />\n                        Enter as a decimal (Ex. 35% body fat (35/100 = .35)<input placeholder='Enter Current Body Fat' type=\"text\" onChange={(e) => {this.handleBodyFat(e.target.value)}} />\n                        <button>Submit</button>\n                    </form>\n\n                </div>\n\n                <LogList /* map over the 'logs' state */ id = {this.props.id} />\n                \n                \n                <div>\n                 <h1>{this.state.result}</h1>\n                </div>\n                \n                \n                \n\n            \n                \n                \n                \n            </div>\n            \n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}