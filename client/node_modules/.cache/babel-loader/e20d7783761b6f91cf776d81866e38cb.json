{"ast":null,"code":"var _jsxFileName = \"/Users/TaylorElliott/Documents/Devmountain/Projects/BodyFat-App/src/components/Input/Input.jsx\";\nimport React, { Component } from 'react';\nimport './input.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Input extends Component {\n  constructor() {\n    super();\n    this.state = {\n      weightInput: 0,\n      bodyFatInput: 0,\n      result: ''\n    };\n    this.handleForm = this.handleForm.bind(this);\n  }\n\n  handleWeight(e) {\n    this.setState({\n      weightInput: e\n    });\n  }\n\n  handleBodyFat(e) {\n    this.setState({\n      bodyFatInput: e\n    });\n  }\n\n  handleForm(e) {\n    e.preventDefault();\n    let weight = parseFloat(this.state.weightInput);\n    let currentBodyFat = parseFloat(this.state.bodyFatInput);\n    let goalBodyFat = parseFloat(this.props.location.state);\n\n    function leanBodyMass() {\n      const fatMass = weight * currentBodyFat;\n      const lbm = weight - fatMass;\n      return lbm;\n    }\n\n    const lbm = leanBodyMass();\n\n    function goalBodyWeight() {\n      const goalWeight = Math.floor(lbm / (1 - goalBodyFat));\n      return goalWeight;\n    }\n\n    const goalWeight = goalBodyWeight(); // console.log(goalBodyWeight())\n\n    function totalFatWeightLost() {\n      const fatToLose = weight - goalWeight;\n      return fatToLose;\n    }\n\n    const totalFatLost = totalFatWeightLost(); // console.log(totalFatWeightLost())\n\n    function timeToGoal() {\n      let weeks = 0;\n\n      for (let i = weight; i >= goalWeight; i -= i * 0.01) {\n        weeks++;\n      }\n\n      return weeks;\n    }\n\n    const weeksToGoal = timeToGoal(); // console.log(timeToGoal())\n\n    function tdee() {\n      const kg = weight * .45;\n      const bmr = kg * 20;\n      const thermicFood = bmr * .1;\n      const exerciseCal = 400;\n      const nonExerciseCal = 400;\n      const result = bmr + thermicFood + exerciseCal + nonExerciseCal;\n      return Math.floor(result - 500);\n    }\n\n    const totalCals = tdee();\n\n    function bodyFatCalc() {\n      return `You need to eat ${totalCals} per day to reach your goal of ${Math.floor(goalBodyFat * 100)}%. It will take ${weeksToGoal} weeks to achieve your goal. You will weight ${goalWeight}lbs and have lost ${totalFatLost} lbs of fat if no muscle mass was lost or gained in the process. It's common to lose or gain some muscle when cutting calories depending on exercise experience. This result should be taken as best case scenario.`;\n    }\n\n    this.setState({\n      result: bodyFatCalc()\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"//on submit launch a post request to the results table.\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.handleForm,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            placeholder: \"Enter Current Weight\",\n            type: \"number\",\n            onChange: e => {\n              this.handleWeight(e.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }, this), \"Enter as a decimal (Ex. 35% body fat (35/100 = .35)\", /*#__PURE__*/_jsxDEV(\"input\", {\n            placeholder: \"Enter Current Body Fat\",\n            type: \"text\",\n            onChange: e => {\n              this.handleBodyFat(e.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 76\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: this.state.result\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/TaylorElliott/Documents/Devmountain/Projects/BodyFat-App/src/components/Input/Input.jsx"],"names":["React","Component","Input","constructor","state","weightInput","bodyFatInput","result","handleForm","bind","handleWeight","e","setState","handleBodyFat","preventDefault","weight","parseFloat","currentBodyFat","goalBodyFat","props","location","leanBodyMass","fatMass","lbm","goalBodyWeight","goalWeight","Math","floor","totalFatWeightLost","fatToLose","totalFatLost","timeToGoal","weeks","i","weeksToGoal","tdee","kg","bmr","thermicFood","exerciseCal","nonExerciseCal","totalCals","bodyFatCalc","render","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './input.css'\n\nexport default class Input extends Component {\n    constructor() {\n        super()\n\n        this.state = {\n            weightInput: 0,\n            bodyFatInput: 0,\n            result: ''\n            \n        }\n        this.handleForm = this.handleForm.bind(this)\n    }\n\n    handleWeight(e) {\n        this.setState({ weightInput: e})\n        \n\n\n    }\n\n    handleBodyFat(e) {\n        this.setState({ bodyFatInput: e})\n    }\n\n    handleForm(e) {\n        e.preventDefault()\n        let weight = parseFloat(this.state.weightInput)\n        let currentBodyFat = parseFloat(this.state.bodyFatInput)\n        let goalBodyFat = parseFloat(this.props.location.state)\n\n        function leanBodyMass() {\n        const fatMass = weight * currentBodyFat\n        const lbm = weight - fatMass\n        return lbm\n\n        }\n\n        const lbm = leanBodyMass()\n\n        function goalBodyWeight() {\n        const goalWeight = Math.floor(lbm/(1-goalBodyFat))\n        return goalWeight\n\n        }\n\n        const goalWeight = goalBodyWeight()\n\n        // console.log(goalBodyWeight())\n\n        function totalFatWeightLost() {\n        const fatToLose = weight - goalWeight\n        return fatToLose\n        }\n\n        const totalFatLost= totalFatWeightLost()\n        // console.log(totalFatWeightLost())\n\n        function timeToGoal() {\n        \n        let weeks = 0\n\n        for (let i = weight; i >= goalWeight; i-= (i * 0.01)){\n        weeks++\n        \n        }\n        return weeks\n        }\n\n        const weeksToGoal = timeToGoal()\n\n\n        // console.log(timeToGoal())\n\n        function tdee() {\n        const kg = weight * .45\n        const bmr = kg * 20\n        const thermicFood = bmr * .1\n        const exerciseCal = 400\n        const nonExerciseCal = 400\n        const result = bmr + thermicFood + exerciseCal + nonExerciseCal\n        return Math.floor(result - 500)\n        \n        }\n\n        const totalCals = tdee()\n\n        function bodyFatCalc() {\n        return(`You need to eat ${totalCals} per day to reach your goal of ${Math.floor(goalBodyFat * 100)}%. It will take ${weeksToGoal} weeks to achieve your goal. You will weight ${goalWeight}lbs and have lost ${totalFatLost} lbs of fat if no muscle mass was lost or gained in the process. It's common to lose or gain some muscle when cutting calories depending on exercise experience. This result should be taken as best case scenario.`)\n        \n\n}\n    this.setState({ result: bodyFatCalc()})\n\n    }\n\n    \n    \n\n\n    render() {\n        return (\n            <div >\n                //on submit launch a post request to the results table.\n                <div className='input'>\n                    <form onSubmit={this.handleForm}>\n                        <input placeholder='Enter Current Weight' type=\"number\" onChange={(e) => {this.handleWeight(e.target.value)}} />\n                        Enter as a decimal (Ex. 35% body fat (35/100 = .35)<input placeholder='Enter Current Body Fat' type=\"text\" onChange={(e) => {this.handleBodyFat(e.target.value)}} />\n                        <button>Submit</button>\n                    </form>\n\n                </div>\n                \n                \n                <div>\n                 <h1>{this.state.result}</h1>\n                </div>\n                \n                \n                \n\n            \n                \n                \n                \n            </div>\n            \n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}