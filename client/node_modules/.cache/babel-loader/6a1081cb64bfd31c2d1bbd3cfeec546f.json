{"ast":null,"code":"var _jsxFileName = \"/Users/TaylorElliott/Documents/Devmountain/Projects/BodyFat-App/client/src/components/Input.jsx\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Input extends Component {\n  constructor() {\n    super();\n    this.state = {\n      weightInput: 0,\n      bodyFatInput: 0,\n      result: ''\n    };\n    this.handleForm = this.handleForm.bind(this);\n  }\n\n  handleWeight(e) {\n    this.setState({\n      weightInput: e\n    });\n    console.log(this.state.weightInput);\n  }\n\n  handleBodyFat(e) {\n    this.setState({\n      bodyFatInput: e\n    });\n  }\n\n  handleForm(e) {\n    e.preventDefault();\n    let weight = parseFloat(this.state.weightInput);\n    let currentBodyFat = parseFloat(this.state.bodyFatInput);\n    let goalBodyFat = parseFloat(this.props.location.state);\n\n    function leanBodyMass() {\n      const fatMass = weight * currentBodyFat;\n      const lbm = weight - fatMass;\n      return lbm;\n    }\n\n    const lbm = leanBodyMass();\n\n    function goalBodyWeight() {\n      const goalWeight = Math.floor(lbm / (1 - goalBodyFat));\n      return goalWeight;\n    }\n\n    const goalWeight = goalBodyWeight(); // console.log(goalBodyWeight())\n\n    function totalFatWeightLost() {\n      const fatToLose = weight - goalWeight;\n      return fatToLose;\n    }\n\n    const totalFatLost = totalFatWeightLost(); // console.log(totalFatWeightLost())\n\n    function timeToGoal() {\n      let weeks = 0;\n\n      for (let i = weight; i >= goalWeight; i -= i * 0.01) {\n        weeks++;\n      }\n\n      return weeks;\n    }\n\n    const weeksToGoal = timeToGoal(); // console.log(timeToGoal())\n\n    function tdee() {\n      const kg = weight * .45;\n      const bmr = kg * 20;\n      const thermicFood = bmr * .1;\n      const exerciseCal = 400;\n      const nonExerciseCal = 400;\n      const result = bmr + thermicFood + exerciseCal + nonExerciseCal;\n      return Math.floor(result - 500);\n    }\n\n    const totalCals = tdee();\n\n    function bodyFatCalc() {\n      return `You need to eat ${totalCals} per day to reach your goal of ${Math.floor(goalBodyFat * 100)}%. It will take ${weeksToGoal} weeks to achieve your goal. You will weight ${goalWeight}lbs and have lost ${totalFatLost} lbs of fat if no muscle mass was lost in the process. It's common to lose some muscle when cutting calories and this result should be taken as best case scenario.`;\n    }\n\n    this.setState({\n      result: bodyFatCalc()\n    });\n  }\n\n  render() {\n    const desiredBodyFat = this.props.location.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleForm,\n        children: [\"Current Weight\", /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Enter Current Weight\",\n          type: \"number\",\n          onChange: e => {\n            this.handleWeight(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 34\n        }, this), \"Current Body Fat\", /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Enter Current Body Fat\",\n          type: \"text\",\n          onChange: e => {\n            this.handleBodyFat(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: this.state.result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/TaylorElliott/Documents/Devmountain/Projects/BodyFat-App/client/src/components/Input.jsx"],"names":["React","Component","Input","constructor","state","weightInput","bodyFatInput","result","handleForm","bind","handleWeight","e","setState","console","log","handleBodyFat","preventDefault","weight","parseFloat","currentBodyFat","goalBodyFat","props","location","leanBodyMass","fatMass","lbm","goalBodyWeight","goalWeight","Math","floor","totalFatWeightLost","fatToLose","totalFatLost","timeToGoal","weeks","i","weeksToGoal","tdee","kg","bmr","thermicFood","exerciseCal","nonExerciseCal","totalCals","bodyFatCalc","render","desiredBodyFat","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Input extends Component {\n    constructor() {\n        super()\n\n        this.state = {\n            weightInput: 0,\n            bodyFatInput: 0,\n            result: ''\n            \n        }\n        this.handleForm = this.handleForm.bind(this)\n    }\n\n    handleWeight(e) {\n        this.setState({ weightInput: e})\n        console.log(this.state.weightInput)\n\n\n    }\n\n    handleBodyFat(e) {\n        this.setState({ bodyFatInput: e})\n    }\n\n    handleForm(e) {\n        e.preventDefault()\n        let weight = parseFloat(this.state.weightInput)\n        let currentBodyFat = parseFloat(this.state.bodyFatInput)\n        let goalBodyFat = parseFloat(this.props.location.state)\n\n        function leanBodyMass() {\n        const fatMass = weight * currentBodyFat\n        const lbm = weight - fatMass\n        return lbm\n\n        }\n\n        const lbm = leanBodyMass()\n\n        function goalBodyWeight() {\n        const goalWeight = Math.floor(lbm/(1-goalBodyFat))\n        return goalWeight\n\n        }\n\n        const goalWeight = goalBodyWeight()\n\n        // console.log(goalBodyWeight())\n\n        function totalFatWeightLost() {\n        const fatToLose = weight - goalWeight\n        return fatToLose\n        }\n\n        const totalFatLost= totalFatWeightLost()\n        // console.log(totalFatWeightLost())\n\n        function timeToGoal() {\n        \n        let weeks = 0\n\n        for (let i = weight; i >= goalWeight; i-= (i * 0.01)){\n        weeks++\n        \n        }\n        return weeks\n        }\n\n        const weeksToGoal = timeToGoal()\n\n\n        // console.log(timeToGoal())\n\n        function tdee() {\n        const kg = weight * .45\n        const bmr = kg * 20\n        const thermicFood = bmr * .1\n        const exerciseCal = 400\n        const nonExerciseCal = 400\n        const result = bmr + thermicFood + exerciseCal + nonExerciseCal\n        return Math.floor(result - 500)\n        \n        }\n\n        const totalCals = tdee()\n\n        function bodyFatCalc() {\n        return(`You need to eat ${totalCals} per day to reach your goal of ${Math.floor(goalBodyFat * 100)}%. It will take ${weeksToGoal} weeks to achieve your goal. You will weight ${goalWeight}lbs and have lost ${totalFatLost} lbs of fat if no muscle mass was lost in the process. It's common to lose some muscle when cutting calories and this result should be taken as best case scenario.`   )\n        \n\n}\n    this.setState({ result: bodyFatCalc()})\n\n    }\n\n    \n    \n\n\n    render() {\n        \n        const desiredBodyFat = this.props.location.state\n        return (\n            <div>\n                <form onSubmit={this.handleForm}>\n                   Current Weight<input placeholder='Enter Current Weight' type=\"number\" onChange={(e) => {this.handleWeight(e.target.value)}} />\n                    Current Body Fat<input placeholder='Enter Current Body Fat' type=\"text\" onChange={(e) => {this.handleBodyFat(e.target.value)}} />\n                    <button>Submit</button>\n                    \n                </form>\n                <h1>{this.state.result}</h1>\n                \n                \n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}